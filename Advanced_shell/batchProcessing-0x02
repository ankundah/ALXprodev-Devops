#!/bin/bash

# List of Pok√©mon to fetch
POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# API base URL
API_BASE="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_LOG="errors.txt"

# Create output directory if not exists
mkdir -p "$OUTPUT_DIR"
> "$ERROR_LOG"  # Clear the error log at the start

# Function to fetch data with retries
fetch_pokemon_data() {
    local name="$1"
    local attempts=0
    local max_attempts=3
    local delay=2
    local success=0

    while [ $attempts -lt $max_attempts ]; do
        echo "üì¶ Fetching $name (Attempt $((attempts+1))/$max_attempts)..."

        HTTP_STATUS=$(curl -s -o "$OUTPUT_DIR/${name}.json" -w "%{http_code}" "$API_BASE/$name")

        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ $name saved to $OUTPUT_DIR/${name}.json"
            success=1
            break
        else
            echo "‚ö†Ô∏è Request failed (status $HTTP_STATUS). Retrying in $delay seconds..."
            rm -f "$OUTPUT_DIR/${name}.json"  # Clean up incomplete file
            sleep $delay
        fi

        attempts=$((attempts + 1))
    done

    if [ $success -eq 0 ]; then
        echo "‚ùå Failed to fetch $name after $max_attempts attempts." | tee -a "$ERROR_LOG"
    fi
}

# Loop through the Pok√©mon list
for name in "${POKEMONS[@]}"; do
    fetch_pokemon_data "$name"
    sleep 1  # small delay to reduce API strain
done

echo ""
echo "‚úÖ Done! Check $OUTPUT_DIR for data, $ERROR_LOG for any failures."
